▷ (단일 파일) 컴포넌트 기반 Vue 애플리케이션 개발
	한 파일에 컴포넌트 구성을 위해 필요한 템플릿, 스크립트, 스타일 정보를 모두 포함하기 때문에
	컴포넌트 단위로 관심사를 분리시킬 수 있다.
	개발 프로젝트 환경 설정은 쉽지 않기에 프로젝트 설정 도구를 이용한다.

▷ Vue 프로젝트 설정 도구
	1) Vue CLI 도구
		webpack 기반 (자바스크립트로 만들어짐)
		한 때 Vue 공식 프로젝트 설정 도구였으나 현재는 잘 사용하지 않는다.
		초기 빌드 시 모든 모듈을 번들링한다.
		기능은 좋지만 관련된 모듈들 하나하나가 크기가 크기 때문에 다운로드가 오래 걸리고,
		웹서버를 구동하기 위한 작업도 오래 걸리기에 다른 도구로 대체됨.

	2) Vite 기반 도구
		ESBuild 기반 (Go 언어로 만들어짐)
		필요할 때만 번들링을 수행, 초기 빌드 시간을 크게 단축.
		기존 도구와 비교해 설정이 간편하고 직관적이고, 개발 생산성이 높다.

▶ 프로젝트 만들기
	1) 프로젝트를 만들고 싶은 경로에서 터미널 실행
	2) npm create vite@latest <- vite 도구를 이용하여 프로젝트 생성
	3) 프로젝트 이름, 여러 설정들 설정. <- 프로젝트는 만들어짐.
	4) 터미널에서 만들어진 프로젝트로 경로 바꾸기
	5) npm install <- 종속성 설치
	6) npm run dev <- vite 기반 Vue 애플리케이션 실행

▶ 애플리케이션에 컴포넌트 등록 방법
	1) 전역 컴포넌트
		main.js 에서 Vue 애플리케이션 인스턴스의 component() 메소드를 이용.
		전역 컴포넌트로 등록한 경우, 루트 컴포넌트의 하위의
		모든 자식 컴포넌트 어디에서나 등록한 컴포넌트를 이용할 수 있다.
		전역 등록은 여러 화면, 컴포넌트에서 공통적으로 자주 사용하는 컴포넌트일 때로 한정.

	2) 지역 컴포넌트
		특정 컴포넌트 객체 내부에 components 라는 옵션을 만들고
		그곳에 템플릿에서 사용할 태그명과 컴포넌트 객체를 등록하여 사용.
		등록한 컴포넌트 내부에서만 사용 가능!