▷ Vue 인스턴스
	Vue.createApp 메서드를 호출하여 만들어진 객체
	name, data 등 여러 옵션을 사용할 수 있다.

	※ Proxy
		객체의 속성을 읽어오거나 설정하는 작업을 가로채기 위해 래핑할 수 있도록 하는 객체.
		프록시를 통해 속성의 변경(m 에서 vm으로 알림 전송) 등 추가적인 기능을 수행할 수 있다.

▶ 인스턴스와 관련된 개념
	1) 애플리케이션 인스턴스
		Vue.createApp을 호출하여 생성되는 최상위 애플리케이션 인스턴스, 전역 설정을 관리

	2) 루트 컴포넌트 인스턴스
		애플리캐이션 인스턴스가 마운트되는 대상 엘리먼트에 표시되는 최상위 컴포넌트
	
	3) 컴포넌트 인스턴스
		모든 Vue 컴포넌트 컴포넌트 인스턴스이며 각 인스턴스는 고유한 데이터와 메서드를 포함

	4) 부모-자식 관계
		컴포넌트 인스턴스 간의 계층 관계로, 하나의 컴포넌트가 다른 컴포넌트를 자식으로 포함할 때 생성

▶ 컴포넌트의 다양한 속성(옵션)
	1) data
		컴포넌트가 관리하는 데이터를 등록할 때 사용

		※ proxy는 컴포넌트 인스턴스가 생성될 때 만들어진다.
		여기서 data에 대한 proxy 를 직접 접근할 수도 있다.
		문법 예시) vm.$data.users
		이 속성 때문에 인스턴스 내부의 data 속성명으로 $ 로 시작하는 건 사용할 수 없다.

	2) computed (계산된 속성)
		data 나 다른 속성이 변경될 때 함수가 실행되어 계산된 값.
		함수의 실행은 의존하고 있는 속성 또는 data가 변경될 때 한 번 호출

		※ 계산된 속성은 기존 데이터를 이용해 읽기 전용의 값을 만들어내기 위해 자주 사용한다.
		하지만 쓰기 작업도 가능하긴 하다. (getter/setter 와 유사하게, 만들면 수정도 가능.)

	3) 메서드
		Vue 인스턴스에서 사용할 메서드를 등록하느 옵션
		디렉티브 표현식, 콧수염 표현식, 이벤트 핸들러로도 사용할 수 있다.

	4) watch (관찰 속성)
		데이터의 변경을 감지하여 특정 로직을 실행할 때 사용.
		비동기 작업을 수행할 때 유용하다.

▷ 이벤트
	1) 인라인 이벤트 처리
		- v-on:이벤트이름="표현식"
		- @click="메소드이름"

	2) 이벤트 핸들러 메서드
		- 컴포넌트 인스턴스에 메서드를 미리 선언하고 v-on 디렉티브로 참조

	※ 간단한 이벤트 경우에는 함수 선언 없이 템플릿에서 바로 선언할 수 있다.

※ 이벤트 버블링
	특정 요소에서 이벤트가 발생했을 때, 그 이벤트가 상위의 부모 요소로 계속 전달되는 현상