▷ 컴포넌트 간의 정보 전달
	여러 컴포넌트들을 조합하여 애플리케이션을 개발하면 컴포넌트 간의 정보의 전달이 반드시 필요하다.
	정보 자체를 전달할 수도 있고, 객체나 배열을 전달할 수도 있다.

	props : 해당 속성을 통해 자식 컴포넌트로 정보를 전달할 수 있다. 부모에서 자식으로만 가능!
	- 자식은 props 옵션으로 속성을 정의하고, 부모 컴포넌트는 v-bind를 이용해 자식 컴포넌트에 정보를 전달!

▶ 속성의 유효성 검사
	속성을 정의할 때 유효성 검사가 필요하다면, 데이터 자체를 넘기기보단, 객체 형태로 속성을 정의할 수 있다.

	기본 문법)
		props : {
			속성명1 : 타입명,
			속성명2 : [타입명1, 타입명2],
			속성명3 : {
				type : 타입명,
				required : true/false, 기본값 : false
				default : 기본값, 기본값 : undefined
			}
		}

	※ 여기서 타입으로 지정할 수 있는 것은 기본 자료형이나, 클래스!
	클래스를 정의하여 사용하는 것도 아주 좋은 방법!


▶ 사용자 정의 이벤트를 이용한 정보 전달
	props 속성을 이용하면 부모 컴포넌트에서 자식 컴포넌트로 정보를 전달할 수 있다.
	반대로 자식 컴포넌트가 부모 컴포넌트로 정보를 전달하기 위해서는 사용자 정의 이벤트를 사용해야한다.
	컴포넌트 인스턴스의 $emit() 메서드를 이용하여 자식 컴포넌트에서 사용자 정의 이벤트를 발신할 수 있다.

	기본 문법)
	// 자식
	this.$emit(이벤트이름, 값, ...)

	// 부모
	<자식 컴포넌트 @이벤트이름=메소드이름>

	methods : {
		메소드 (값, ...) {
			처리할 코드 작성...
		}
	}

	※ $emit() 내장 메서드는 직계 부모 컴포넌트로만 이벤트 정보를 전송!
	계층 구조가 부모, 손자 등 복잡하다면 중간에서 이벤트 정보를 받아서 다시 부모로 전달해줘야한다.

▶ 이벤트 에미터 사용하기
	부모 - 자식 - 손자 계층 간에도 복잡하긴 하지만 정보 전달이 가능하다.
	하지만, 형제 관계에서는 우리가 익힌 개념으로는 어렵다.
	이런 경우 사용할 수 있는 것이 이벤트 에미터!
	하나의 공유 이벤트 에미터를 만들어두고
	모든 이벤트 정보가 에미터를 거쳐서 흘러가도록 하는 방법.